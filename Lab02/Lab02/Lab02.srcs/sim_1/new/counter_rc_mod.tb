`timescale 1ns / 1ps









module counter_rc_mod_tb;

logic clk, rst, enb;
logic [3:0] q;
logic cy;

counter_rc_mod DUV(.clk(clk), .rst(rst), .enb(enb), .q(q), .cy);
   
  //    generate clock
 parameter CLK_PD = 10;

   always begin
      clk = 1'b0; #(CLK_PD/2);
      clk = 1'b1; #(CLK_PD/2);
   end

initial begin
rst = 1;
@(posedge clk) #1;
rst = 0; 
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 0;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;
enb = 1;
@(posedge clk) #1;


$stop;
end 

endmodule 